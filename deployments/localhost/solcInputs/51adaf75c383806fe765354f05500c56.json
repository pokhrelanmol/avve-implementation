{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/LendingPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.11;\nimport \"./library/PriceConverter.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nerror LendingPool__TokenNotSupported();\nerror LendingPool__AmountIsZero();\nerror LendingPool__TransferFailed();\nerror LendingPool__HealthFactorTooLow();\nerror LendingPool__BorrowLimitReached();\nerror LendingPool__NotEnoughTokenInPoolToBorrow();\n\ncontract LendingPool is Ownable {\n    /*STATE VARAIBLES */\n    mapping(address => address) internal s_tokenToPriceFeedAddress;\n    mapping(address => mapping(address => uint256)) s_userToTokenToBalance;\n    mapping(address => mapping(address => uint256)) s_userToTokenToBorrowedAmount;\n    mapping(address => uint256) s_userToCollateralInUSD;\n    mapping(address => uint256) s_userToBorrowedAmountInUSD;\n    uint256 public constant LIQUIDATION_TRESHOLD = 80;\n    uint256 public constant MIN_HEALTH_FACTOR = 1e8;\n\n    /* LIBRARY*/\n    using PriceConverter for uint256;\n\n    function deposit(address tokenAddress, uint256 amount)\n        external\n        payable\n        isTokenSupported(tokenAddress)\n        isAmountZero(amount)\n    {\n        uint256 amountInUSD = amount.getConversionRateInUSD(\n            AggregatorV3Interface(s_tokenToPriceFeedAddress[tokenAddress])\n        ); // amount is a first perameter and priceFeed is a second perameter\n        s_userToCollateralInUSD[msg.sender] += amountInUSD;\n        s_userToTokenToBalance[msg.sender][tokenAddress] += amount;\n        bool success = IERC20(tokenAddress).transferFrom(\n            msg.sender,\n            address(this),\n            amount\n        );\n        if (!success) {\n            revert LendingPool__TransferFailed();\n        }\n    }\n\n    function borrow(address tokenAddress, uint256 amount)\n        external\n        isAmountZero(amount)\n        isTokenSupported(tokenAddress)\n    {\n        if (IERC20(tokenAddress).balanceOf(address(this)) < amount)\n            revert LendingPool__NotEnoughTokenInPoolToBorrow();\n        s_userToTokenToBorrowedAmount[msg.sender][tokenAddress] += amount;\n        if (getHealthFactor(msg.sender) < MIN_HEALTH_FACTOR)\n            revert LendingPool__HealthFactorTooLow();\n        // Something is not clear here - I still cant figure out that how heath factor is calculated\n        s_userToTokenToBorrowedAmount[msg.sender][tokenAddress] += amount;\n        bool success = IERC20(tokenAddress).transfer(msg.sender, amount);\n        if (!success) revert LendingPool__TransferFailed();\n    }\n\n    function getHealthFactor(address userAddress)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 amountThatCanBeBorrowed = (s_userToCollateralInUSD[\n            userAddress\n        ] * LIQUIDATION_TRESHOLD) / 100;\n        // if (s_userToBorrowedAmountInUSD[userAddress] == 0) return 100e8; //if no previous borrow then health factor is 100\n        return\n            (amountThatCanBeBorrowed * 1e8) /\n            s_userToBorrowedAmountInUSD[userAddress];\n    }\n\n    function addTokenToPriceFeedAddress(\n        address tokenAddress,\n        address priceFeedAddress\n    ) external onlyOwner {\n        s_tokenToPriceFeedAddress[tokenAddress] = priceFeedAddress;\n    }\n\n    function getTokenToPriceFeedAddress(address tokenAddress)\n        external\n        view\n        returns (address)\n    {\n        return s_tokenToPriceFeedAddress[tokenAddress];\n    }\n\n    modifier isTokenSupported(address tokenAddress) {\n        if (s_tokenToPriceFeedAddress[tokenAddress] == address(0)) {\n            revert LendingPool__TokenNotSupported();\n        }\n        _;\n    }\n    modifier isAmountZero(uint256 amount) {\n        if (amount == 0) {\n            revert LendingPool__AmountIsZero();\n        }\n        _;\n    }\n}\n"
    },
    "contracts/library/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.11;\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n    function getPriceInUSD(AggregatorV3Interface priceFeed)\n        internal\n        view\n        returns (uint256)\n    {\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\n        return uint256(answer);\n    }\n\n    // answer will be on 8 decimals if 1 link = 8 dollar then answer will be 800000000\n\n    function getConversionRateInUSD(\n        uint256 amount,\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        //! Note : We are assuming that every token in our pool have 18 decimals\n        uint256 priceInUSD = (getPriceInUSD(priceFeed) * amount) / 1e8;\n        // if amount = 2 and priceInUSD = 800000000 then priceInUSD = 800000000 * 2 / 1e8 = 1600000000\n        return priceInUSD;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}