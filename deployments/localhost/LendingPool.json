{
  "address": "0x3D63c50AD04DD5aE394CAB562b7691DD5de7CF6f",
  "abi": [
    {
      "inputs": [],
      "name": "LendingPool__AmountIsZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LendingPool__HealthFactorTooLow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LendingPool__NotEnoughTokenInPoolToBorrow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LendingPool__TokenNotSupported",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LendingPool__TransferFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "LIQUIDATION_TRESHOLD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_HEALTH_FACTOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "name": "addTokenToPriceFeedAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "borrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getHealthFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "getTokenToPriceFeedAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4d283efe7e5b3f577cc2498f3a16082cb04844657216fc00baf42c5372ae47ab",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x3D63c50AD04DD5aE394CAB562b7691DD5de7CF6f",
    "transactionIndex": 0,
    "gasUsed": "1173718",
    "logsBloom": "0x
    "blockHash": "0x7174453b667416f22380d3df6b3e6df07c7a5c2e02e2bd33526ed62e8c513388",
    "transactionHash": "0x4d283efe7e5b3f577cc2498f3a16082cb04844657216fc00baf42c5372ae47ab",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 15973297,
        "transactionHash": "0x4d283efe7e5b3f577cc2498f3a16082cb04844657216fc00baf42c5372ae47ab",
        "address": "0x3D63c50AD04DD5aE394CAB562b7691DD5de7CF6f",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x7174453b667416f22380d3df6b3e6df07c7a5c2e02e2bd33526ed62e8c513388"
      }
    ],
    "blockNumber": 15973297,
    "cumulativeGasUsed": "1173718",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "51adaf75c383806fe765354f05500c56",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"LendingPool__AmountIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LendingPool__HealthFactorTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LendingPool__NotEnoughTokenInPoolToBorrow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LendingPool__TokenNotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LendingPool__TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LIQUIDATION_TRESHOLD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_HEALTH_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"name\":\"addTokenToPriceFeedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getHealthFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getTokenToPriceFeedAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LendingPool.sol\":\"LendingPool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/LendingPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\nimport \\\"./library/PriceConverter.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nerror LendingPool__TokenNotSupported();\\nerror LendingPool__AmountIsZero();\\nerror LendingPool__TransferFailed();\\nerror LendingPool__HealthFactorTooLow();\\nerror LendingPool__BorrowLimitReached();\\nerror LendingPool__NotEnoughTokenInPoolToBorrow();\\n\\ncontract LendingPool is Ownable {\\n    /*STATE VARAIBLES */\\n    mapping(address => address) internal s_tokenToPriceFeedAddress;\\n    mapping(address => mapping(address => uint256)) s_userToTokenToBalance;\\n    mapping(address => mapping(address => uint256)) s_userToTokenToBorrowedAmount;\\n    mapping(address => uint256) s_userToCollateralInUSD;\\n    mapping(address => uint256) s_userToBorrowedAmountInUSD;\\n    uint256 public constant LIQUIDATION_TRESHOLD = 80;\\n    uint256 public constant MIN_HEALTH_FACTOR = 1e8;\\n\\n    /* LIBRARY*/\\n    using PriceConverter for uint256;\\n\\n    function deposit(address tokenAddress, uint256 amount)\\n        external\\n        payable\\n        isTokenSupported(tokenAddress)\\n        isAmountZero(amount)\\n    {\\n        uint256 amountInUSD = amount.getConversionRateInUSD(\\n            AggregatorV3Interface(s_tokenToPriceFeedAddress[tokenAddress])\\n        ); // amount is a first perameter and priceFeed is a second perameter\\n        s_userToCollateralInUSD[msg.sender] += amountInUSD;\\n        s_userToTokenToBalance[msg.sender][tokenAddress] += amount;\\n        bool success = IERC20(tokenAddress).transferFrom(\\n            msg.sender,\\n            address(this),\\n            amount\\n        );\\n        if (!success) {\\n            revert LendingPool__TransferFailed();\\n        }\\n    }\\n\\n    function borrow(address tokenAddress, uint256 amount)\\n        external\\n        isAmountZero(amount)\\n        isTokenSupported(tokenAddress)\\n    {\\n        if (IERC20(tokenAddress).balanceOf(address(this)) < amount)\\n            revert LendingPool__NotEnoughTokenInPoolToBorrow();\\n        s_userToTokenToBorrowedAmount[msg.sender][tokenAddress] += amount;\\n        if (getHealthFactor(msg.sender) < MIN_HEALTH_FACTOR)\\n            revert LendingPool__HealthFactorTooLow();\\n        // Something is not clear here - I still cant figure out that how heath factor is calculated\\n        s_userToTokenToBorrowedAmount[msg.sender][tokenAddress] += amount;\\n        bool success = IERC20(tokenAddress).transfer(msg.sender, amount);\\n        if (!success) revert LendingPool__TransferFailed();\\n    }\\n\\n    function getHealthFactor(address userAddress)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        uint256 amountThatCanBeBorrowed = (s_userToCollateralInUSD[\\n            userAddress\\n        ] * LIQUIDATION_TRESHOLD) / 100;\\n        // if (s_userToBorrowedAmountInUSD[userAddress] == 0) return 100e8; //if no previous borrow then health factor is 100\\n        return\\n            (amountThatCanBeBorrowed * 1e8) /\\n            s_userToBorrowedAmountInUSD[userAddress];\\n    }\\n\\n    function addTokenToPriceFeedAddress(\\n        address tokenAddress,\\n        address priceFeedAddress\\n    ) external onlyOwner {\\n        s_tokenToPriceFeedAddress[tokenAddress] = priceFeedAddress;\\n    }\\n\\n    function getTokenToPriceFeedAddress(address tokenAddress)\\n        external\\n        view\\n        returns (address)\\n    {\\n        return s_tokenToPriceFeedAddress[tokenAddress];\\n    }\\n\\n    modifier isTokenSupported(address tokenAddress) {\\n        if (s_tokenToPriceFeedAddress[tokenAddress] == address(0)) {\\n            revert LendingPool__TokenNotSupported();\\n        }\\n        _;\\n    }\\n    modifier isAmountZero(uint256 amount) {\\n        if (amount == 0) {\\n            revert LendingPool__AmountIsZero();\\n        }\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xb521f187ddc42197c3c7afc9c8888d95633de74421f7f3973d34febccd27eef3\",\"license\":\"MIT\"},\"contracts/library/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    function getPriceInUSD(AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        return uint256(answer);\\n    }\\n\\n    // answer will be on 8 decimals if 1 link = 8 dollar then answer will be 800000000\\n\\n    function getConversionRateInUSD(\\n        uint256 amount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        //! Note : We are assuming that every token in our pool have 18 decimals\\n        uint256 priceInUSD = (getPriceInUSD(priceFeed) * amount) / 1e8;\\n        // if amount = 2 and priceInUSD = 800000000 then priceInUSD = 800000000 * 2 / 1e8 = 1600000000\\n        return priceInUSD;\\n    }\\n}\\n\",\"keccak256\":\"0x74f2e13ec04702cbe124790624d7d30673ef0f97ced399e72345698282b2bf4e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6113db8061010d6000396000f3fe6080604052600436106100915760003560e01c8063aa6acb6f11610059578063aa6acb6f1461015a578063b5627e4214610185578063d814b5b3146101b0578063f2fde38b146101d9578063fe6bcd7c1461020257610091565b80632229f7ea1461009657806347e7ef24146100d35780634b8a3529146100ef578063715018a6146101185780638da5cb5b1461012f575b600080fd5b3480156100a257600080fd5b506100bd60048036038101906100b89190610e26565b61023f565b6040516100ca9190610e62565b60405180910390f35b6100ed60048036038101906100e89190610eb3565b6102a8565b005b3480156100fb57600080fd5b5061011660048036038101906101119190610eb3565b6105cd565b005b34801561012457600080fd5b5061012d6109af565b005b34801561013b57600080fd5b506101446109c3565b6040516101519190610e62565b60405180910390f35b34801561016657600080fd5b5061016f6109ec565b60405161017c9190610f02565b60405180910390f35b34801561019157600080fd5b5061019a6109f1565b6040516101a79190610f02565b60405180910390f35b3480156101bc57600080fd5b506101d760048036038101906101d29190610f1d565b6109f9565b005b3480156101e557600080fd5b5061020060048036038101906101fb9190610e26565b610a83565b005b34801561020e57600080fd5b5061022960048036038101906102249190610e26565b610b07565b6040516102369190610f02565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b81600073ffffffffffffffffffffffffffffffffffffffff16600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561036f576040517f3948503100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8160008114156103ab576040517f9d2c667d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061041f600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685610bc690919063ffffffff16565b905080600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104709190610f8c565b9250508190555083600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105039190610f8c565b9250508190555060008573ffffffffffffffffffffffffffffffffffffffff166323b872dd3330886040518463ffffffff1660e01b815260040161054993929190610fe2565b6020604051808303816000875af1158015610568573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058c9190611051565b9050806105c5576040517fd472deb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050505050565b806000811415610609576040517f9d2c667d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82600073ffffffffffffffffffffffffffffffffffffffff16600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156106d0576040517f3948503100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b828473ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161070a9190610e62565b602060405180830381865afa158015610727573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074b9190611093565b1015610783576040517fb19e921500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461080f9190610f8c565b925050819055506305f5e10061082433610b07565b101561085c576040517fac8f432c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546108e89190610f8c565b9250508190555060008473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33866040518363ffffffff1660e01b815260040161092c9291906110c0565b6020604051808303816000875af115801561094b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096f9190611051565b9050806109a8576040517fd472deb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050565b6109b7610bf8565b6109c16000610c76565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b605081565b6305f5e10081565b610a01610bf8565b80600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b610a8b610bf8565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610afb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af29061116c565b60405180910390fd5b610b0481610c76565b50565b60008060646050600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610b58919061118c565b610b629190611215565b9050600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546305f5e10082610bb4919061118c565b610bbe9190611215565b915050919050565b6000806305f5e10084610bd885610d3a565b610be2919061118c565b610bec9190611215565b90508091505092915050565b610c00610dbb565b73ffffffffffffffffffffffffffffffffffffffff16610c1e6109c3565b73ffffffffffffffffffffffffffffffffffffffff1614610c74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c6b90611292565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610d88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dac919061132a565b50505091505080915050919050565b600033905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610df382610dc8565b9050919050565b610e0381610de8565b8114610e0e57600080fd5b50565b600081359050610e2081610dfa565b92915050565b600060208284031215610e3c57610e3b610dc3565b5b6000610e4a84828501610e11565b91505092915050565b610e5c81610de8565b82525050565b6000602082019050610e776000830184610e53565b92915050565b6000819050919050565b610e9081610e7d565b8114610e9b57600080fd5b50565b600081359050610ead81610e87565b92915050565b60008060408385031215610eca57610ec9610dc3565b5b6000610ed885828601610e11565b9250506020610ee985828601610e9e565b9150509250929050565b610efc81610e7d565b82525050565b6000602082019050610f176000830184610ef3565b92915050565b60008060408385031215610f3457610f33610dc3565b5b6000610f4285828601610e11565b9250506020610f5385828601610e11565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610f9782610e7d565b9150610fa283610e7d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610fd757610fd6610f5d565b5b828201905092915050565b6000606082019050610ff76000830186610e53565b6110046020830185610e53565b6110116040830184610ef3565b949350505050565b60008115159050919050565b61102e81611019565b811461103957600080fd5b50565b60008151905061104b81611025565b92915050565b60006020828403121561106757611066610dc3565b5b60006110758482850161103c565b91505092915050565b60008151905061108d81610e87565b92915050565b6000602082840312156110a9576110a8610dc3565b5b60006110b78482850161107e565b91505092915050565b60006040820190506110d56000830185610e53565b6110e26020830184610ef3565b9392505050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006111566026836110e9565b9150611161826110fa565b604082019050919050565b6000602082019050818103600083015261118581611149565b9050919050565b600061119782610e7d565b91506111a283610e7d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156111db576111da610f5d565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061122082610e7d565b915061122b83610e7d565b92508261123b5761123a6111e6565b5b828204905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061127c6020836110e9565b915061128782611246565b602082019050919050565b600060208201905081810360008301526112ab8161126f565b9050919050565b600069ffffffffffffffffffff82169050919050565b6112d1816112b2565b81146112dc57600080fd5b50565b6000815190506112ee816112c8565b92915050565b6000819050919050565b611307816112f4565b811461131257600080fd5b50565b600081519050611324816112fe565b92915050565b600080600080600060a0868803121561134657611345610dc3565b5b6000611354888289016112df565b955050602061136588828901611315565b94505060406113768882890161107e565b93505060606113878882890161107e565b9250506080611398888289016112df565b915050929550929590935056fea264697066735822122063f098bba8c158fc63b59b03a616c7a10905f02112928df1c8276cb3d4e3498a64736f6c634300080b0033",
  "deployedBytecode": "0x6080604052600436106100915760003560e01c8063aa6acb6f11610059578063aa6acb6f1461015a578063b5627e4214610185578063d814b5b3146101b0578063f2fde38b146101d9578063fe6bcd7c1461020257610091565b80632229f7ea1461009657806347e7ef24146100d35780634b8a3529146100ef578063715018a6146101185780638da5cb5b1461012f575b600080fd5b3480156100a257600080fd5b506100bd60048036038101906100b89190610e26565b61023f565b6040516100ca9190610e62565b60405180910390f35b6100ed60048036038101906100e89190610eb3565b6102a8565b005b3480156100fb57600080fd5b5061011660048036038101906101119190610eb3565b6105cd565b005b34801561012457600080fd5b5061012d6109af565b005b34801561013b57600080fd5b506101446109c3565b6040516101519190610e62565b60405180910390f35b34801561016657600080fd5b5061016f6109ec565b60405161017c9190610f02565b60405180910390f35b34801561019157600080fd5b5061019a6109f1565b6040516101a79190610f02565b60405180910390f35b3480156101bc57600080fd5b506101d760048036038101906101d29190610f1d565b6109f9565b005b3480156101e557600080fd5b5061020060048036038101906101fb9190610e26565b610a83565b005b34801561020e57600080fd5b5061022960048036038101906102249190610e26565b610b07565b6040516102369190610f02565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b81600073ffffffffffffffffffffffffffffffffffffffff16600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561036f576040517f3948503100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8160008114156103ab576040517f9d2c667d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061041f600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1685610bc690919063ffffffff16565b905080600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104709190610f8c565b9250508190555083600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105039190610f8c565b9250508190555060008573ffffffffffffffffffffffffffffffffffffffff166323b872dd3330886040518463ffffffff1660e01b815260040161054993929190610fe2565b6020604051808303816000875af1158015610568573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058c9190611051565b9050806105c5576040517fd472deb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050505050565b806000811415610609576040517f9d2c667d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82600073ffffffffffffffffffffffffffffffffffffffff16600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156106d0576040517f3948503100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b828473ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161070a9190610e62565b602060405180830381865afa158015610727573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074b9190611093565b1015610783576040517fb19e921500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461080f9190610f8c565b925050819055506305f5e10061082433610b07565b101561085c576040517fac8f432c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546108e89190610f8c565b9250508190555060008473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33866040518363ffffffff1660e01b815260040161092c9291906110c0565b6020604051808303816000875af115801561094b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061096f9190611051565b9050806109a8576040517fd472deb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050565b6109b7610bf8565b6109c16000610c76565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b605081565b6305f5e10081565b610a01610bf8565b80600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b610a8b610bf8565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610afb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af29061116c565b60405180910390fd5b610b0481610c76565b50565b60008060646050600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610b58919061118c565b610b629190611215565b9050600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546305f5e10082610bb4919061118c565b610bbe9190611215565b915050919050565b6000806305f5e10084610bd885610d3a565b610be2919061118c565b610bec9190611215565b90508091505092915050565b610c00610dbb565b73ffffffffffffffffffffffffffffffffffffffff16610c1e6109c3565b73ffffffffffffffffffffffffffffffffffffffff1614610c74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c6b90611292565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610d88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dac919061132a565b50505091505080915050919050565b600033905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610df382610dc8565b9050919050565b610e0381610de8565b8114610e0e57600080fd5b50565b600081359050610e2081610dfa565b92915050565b600060208284031215610e3c57610e3b610dc3565b5b6000610e4a84828501610e11565b91505092915050565b610e5c81610de8565b82525050565b6000602082019050610e776000830184610e53565b92915050565b6000819050919050565b610e9081610e7d565b8114610e9b57600080fd5b50565b600081359050610ead81610e87565b92915050565b60008060408385031215610eca57610ec9610dc3565b5b6000610ed885828601610e11565b9250506020610ee985828601610e9e565b9150509250929050565b610efc81610e7d565b82525050565b6000602082019050610f176000830184610ef3565b92915050565b60008060408385031215610f3457610f33610dc3565b5b6000610f4285828601610e11565b9250506020610f5385828601610e11565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610f9782610e7d565b9150610fa283610e7d565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610fd757610fd6610f5d565b5b828201905092915050565b6000606082019050610ff76000830186610e53565b6110046020830185610e53565b6110116040830184610ef3565b949350505050565b60008115159050919050565b61102e81611019565b811461103957600080fd5b50565b60008151905061104b81611025565b92915050565b60006020828403121561106757611066610dc3565b5b60006110758482850161103c565b91505092915050565b60008151905061108d81610e87565b92915050565b6000602082840312156110a9576110a8610dc3565b5b60006110b78482850161107e565b91505092915050565b60006040820190506110d56000830185610e53565b6110e26020830184610ef3565b9392505050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006111566026836110e9565b9150611161826110fa565b604082019050919050565b6000602082019050818103600083015261118581611149565b9050919050565b600061119782610e7d565b91506111a283610e7d565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156111db576111da610f5d565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061122082610e7d565b915061122b83610e7d565b92508261123b5761123a6111e6565b5b828204905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061127c6020836110e9565b915061128782611246565b602082019050919050565b600060208201905081810360008301526112ab8161126f565b9050919050565b600069ffffffffffffffffffff82169050919050565b6112d1816112b2565b81146112dc57600080fd5b50565b6000815190506112ee816112c8565b92915050565b6000819050919050565b611307816112f4565b811461131257600080fd5b50565b600081519050611324816112fe565b92915050565b600080600080600060a0868803121561134657611345610dc3565b5b6000611354888289016112df565b955050602061136588828901611315565b94505060406113768882890161107e565b93505060606113878882890161107e565b9250506080611398888289016112df565b915050929550929590935056fea264697066735822122063f098bba8c158fc63b59b03a616c7a10905f02112928df1c8276cb3d4e3498a64736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 53,
        "contract": "contracts/LendingPool.sol:LendingPool",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 282,
        "contract": "contracts/LendingPool.sol:LendingPool",
        "label": "s_tokenToPriceFeedAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 288,
        "contract": "contracts/LendingPool.sol:LendingPool",
        "label": "s_userToTokenToBalance",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 294,
        "contract": "contracts/LendingPool.sol:LendingPool",
        "label": "s_userToTokenToBorrowedAmount",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 298,
        "contract": "contracts/LendingPool.sol:LendingPool",
        "label": "s_userToCollateralInUSD",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 302,
        "contract": "contracts/LendingPool.sol:LendingPool",
        "label": "s_userToBorrowedAmountInUSD",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}